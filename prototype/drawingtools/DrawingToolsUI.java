/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package drawingtools;
import javax.swing.*;
/**
 *
 * @author Carmen
 */
public class DrawingToolsUI extends javax.swing.JFrame {

    /**
     * Creates new form DrawingToolsUI
     */
    public DrawingToolsUI() {
        initComponents();
        initToolbars();
    }
    
    /**
     * Initializes the toolbars for the tools. Sets the drawing tool as default.
     */
    private void initToolbars()  {
        drawingToolbar = new Drawing();
        drawingToolbar.setVisible(false);
        selectorToolbar = new Selector();
        selectorToolbar.setVisible(false);
        textToolbar = new Text();
        textToolbar.setVisible(false);
        notesToolbar = new Notes();
        notesToolbar.setVisible(false);
        shapeToolbar = new Shape();
        shapeToolbar.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selector = new javax.swing.JToggleButton();
        shape = new javax.swing.JToggleButton();
        text = new javax.swing.JToggleButton();
        draw = new javax.swing.JToggleButton();
        note = new javax.swing.JToggleButton();

        selector.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawingtools/select_all.png"))); // NOI18N
        selector.setSelected(true);
        selector.setMaximumSize(new java.awt.Dimension(55, 55));
        selector.setMinimumSize(new java.awt.Dimension(55, 55));
        selector.setPreferredSize(new java.awt.Dimension(55, 55));
        selector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorActionPerformed(evt);
            }
        });

        shape.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawingtools/shape.png"))); // NOI18N
        shape.setMaximumSize(new java.awt.Dimension(55, 55));
        shape.setMinimumSize(new java.awt.Dimension(55, 55));
        shape.setPreferredSize(new java.awt.Dimension(55, 55));
        shape.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shapeActionPerformed(evt);
            }
        });

        text.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawingtools/text.png"))); // NOI18N
        text.setMaximumSize(new java.awt.Dimension(55, 55));
        text.setMinimumSize(new java.awt.Dimension(55, 55));
        text.setPreferredSize(new java.awt.Dimension(55, 55));
        text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textActionPerformed(evt);
            }
        });

        draw.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawingtools/draw.png"))); // NOI18N
        draw.setMaximumSize(new java.awt.Dimension(55, 55));
        draw.setMinimumSize(new java.awt.Dimension(55, 55));
        draw.setPreferredSize(new java.awt.Dimension(55, 55));
        draw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawActionPerformed(evt);
            }
        });

        note.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawingtools/note.png"))); // NOI18N
        note.setMaximumSize(new java.awt.Dimension(55, 55));
        note.setMinimumSize(new java.awt.Dimension(55, 55));
        note.setPreferredSize(new java.awt.Dimension(55, 55));
        note.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shape, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(draw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(note, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(selector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(shape, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(draw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(note, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorActionPerformed
        System.out.println("In DrawingToolsUI.selectorActionPerformed.");
        if(selector.isSelected())  {
            changeSelection(selector);
            selectorToolbar.setVisible(true);
            //System.out.println("Selector tool is selected.");
        }
        else  {
            selector.setSelected(true);
            selector.updateUI();
        }
    }//GEN-LAST:event_selectorActionPerformed

    private void textActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textActionPerformed
        System.out.println("In DrawingToolsUI.textActionPerformed.");
        if(text.isSelected())  {
            changeSelection(text);
            textToolbar.setVisible(true);
            //System.out.println("Text Tool is selected.");
        }
        else  {
            text.setSelected(true);
            text.updateUI();
        }
    }//GEN-LAST:event_textActionPerformed

    private void noteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noteActionPerformed
        System.out.println("In DrawingToolsUI.noteActionPerformed.");
        if(note.isSelected())  {
            changeSelection(note);
            notesToolbar.setVisible(true);
            //System.out.println("Note Tool is selected.");
        }
        else  {
            note.setSelected(true);
            note.updateUI();
        }
    }//GEN-LAST:event_noteActionPerformed

    private void drawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawActionPerformed
        System.out.println("In DrawingToolsUI.drawActionPerformed.");
        if(draw.isSelected())  {
            changeSelection(draw);
            drawingToolbar.setVisible(true);
            //System.out.println("Drawing Tool is selected.");
        }
        else  {
            draw.setSelected(true);
            draw.updateUI();
        }    
    }//GEN-LAST:event_drawActionPerformed

    private void shapeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shapeActionPerformed
        System.out.println("In DrawingToolsUI.shapeActionPerformed.");
        if(shape.isSelected())  {
            changeSelection(shape);
            shapeToolbar.setVisible(true);
            //System.out.println("Shape Tool is selected.");
        }
        else  {
            shape.setSelected(true);
            shape.updateUI();
        }
    }//GEN-LAST:event_shapeActionPerformed

    private void changeSelection(javax.swing.JToggleButton button)  {
        if(!button.equals(selector))  {
            selector.setSelected(false);
            selector.updateUI();
            selectorToolbar.setVisible(false);
        }
        if(!button.equals(draw))  {
            draw.setSelected(false);
            draw.updateUI();
            drawingToolbar.setVisible(false);
        }
        if(!button.equals(note))  {
            note.setSelected(false);
            note.updateUI();
            notesToolbar.setVisible(false);
        }
        if(!button.equals(shape))  {
            shape.setSelected(false);
            shape.updateUI();
            shapeToolbar.setVisible(false);
        }
        if(!button.equals(text))  {
            text.setSelected(false);
            text.updateUI();
            textToolbar.setVisible(false);
        }
    }
    /*
    final Icon drawIcon = new ImageIcon(getClass().getResource("/drawingtools/"));
    final Icon noteIcon = new ImageIcon(getClass().getResource("/drawingtools/"));
    final Icon selectorIcon = new ImageIcon(getClass().getResource("/drawingtools/"));
    final Icon shapeIcon = new ImageIcon(getClass().getResource("/drawingtools/"));
    final Icon textIcon = new ImageIcon(getClass().getResource("/drawingtools/text.png"));*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton draw;
    private javax.swing.JToggleButton note;
    private javax.swing.JToggleButton selector;
    private javax.swing.JToggleButton shape;
    private javax.swing.JToggleButton text;
    // End of variables declaration//GEN-END:variables
    private Drawing drawingToolbar;
    private Selector selectorToolbar;
    private Text textToolbar;
    private Notes notesToolbar;
    private Shape shapeToolbar;
}
