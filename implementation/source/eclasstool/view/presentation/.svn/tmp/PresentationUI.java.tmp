/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eclasstool.view.presentation;


import eclasstool.model.presentation.*;
import eclasstool.view.drawingtools.*;
import eclasstool.view.layers.*;
import java.io.*;
import java.util.*;
import java.awt.image.BufferedImage;
import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.*;
import java.awt.*;

/**
 *
 * @author Leah Pichay (lpichay@calpoly.edu)
 * @author Jordan Tang (jtang22@calpoly.edu)
 */
public class PresentationUI extends javax.swing.JInternalFrame {

    /**
     * Creates new form PresentationUI
     */
    private Presentation lecture;
    private Slide curSlide;
    private SlideUI currSlideUI;
    private ArrayList<SlideUI> slidePanels;
    private DefaultListModel model;
    
    private ArrayList<JPanel> thumbnails;
    private DrawingToolsUI toolbox;
    private LayerManagerUI manager;
    /**
     * Creates a new presentation UI, initializing with a new lecture
     */
    public PresentationUI() {
        lecture = new Presentation();
        initComponents();
    }

    public PresentationUI(Presentation present, DrawingToolsUI toolbox, LayerManagerUI manager) {
        super("Presentation Viewer", false, true);
        this.manager = manager;
        this.toolbox = toolbox;
        lecture = present;
        slidePanels = new ArrayList<SlideUI>();
        thumbnails = new ArrayList<JPanel>();
        Slide[] slides = lecture.getSlides();
        model = new DefaultListModel();
        initComponents();

        for (Slide slide : slides) {
           /* JPanel panel = new JPanel();
            panel.setLayout(new BorderLayout());
            JLabel label = new JLabel(slide.getSlideContent());
            label.setMaximumSize(new Dimension(15, 5));
            label.setPreferredSize(new Dimension(15, 5));
            panel.add(label, BorderLayout.CENTER);
            panel.setMaximumSize(new Dimension(100, 75));
            panel.setPreferredSize(new Dimension(100, 75));
            thumbnails.add(panel);*/
        	createThumbnail();
        }

        lectureSlideViewer.setCellRenderer(new PresentationListCellRenderer());
        lectureSlideViewer.setModel(model);
        slidePanels.add(new SlideUI(toolbox)); 
        initPresentation();
        manager.updateManager(slidePanels.get(0));
    }
    /**
     * Adds HTML text to a new slide
     */
    public void addText(String htmlContent) {
        SlideUI newSlide = new SlideUI(toolbox, htmlContent);
        slidePanels.add(newSlide);
    }
<<<<<<< .mine

    private void createThumbnail()  {
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());
        JLabel label = new JLabel("Slide" + (thumbnails.size() + 1));
        label.setMaximumSize(new Dimension(15, 5));
        label.setPreferredSize(new Dimension(15, 5));
        panel.add(label, BorderLayout.CENTER);
        
        panel.setMaximumSize(new Dimension(100, 75));
        panel.setPreferredSize(new Dimension(100, 75));
        thumbnails.add(panel);
    }
    public void updateSlidePanel()  {
    	createThumbnail();
    	model.addElement(thumbnails.get(thumbnails.size() - 1));
    	repaint();
    }
    
=======

    private void createThumbnail()  {
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());
       // JLabel label = new JLabel(slide.getSlideContent());
        //label.setMaximumSize(new Dimension(15, 5));
        //label.setPreferredSize(new Dimension(15, 5));
        //panel.add(label, BorderLayout.CENTER);
        panel.setMaximumSize(new Dimension(100, 75));
        panel.setPreferredSize(new Dimension(100, 75));
        thumbnails.add(panel);
    }
    public void updateSlidePanel()  {
    	createThumbnail();
    	model.addElement(thumbnails.get(thumbnails.size() - 1));
    	repaint();
    }
    
>>>>>>> .r686
    public void initPresentation() {
        curSlide = lecture.getCurrentSlide();
        currSlideUI = slidePanels.get(lecture.getCurrentSlideNum());
        jScrollPane1.setViewportView(currSlideUI);
        currSlideUI.setVisible(true);
        for (int ndx = 0; ndx < lecture.getSlides().length; ndx++)
        {
            model.addElement(thumbnails.get(ndx));
        }
        lectureSlideViewer.setSelectedIndex(0);


        lectureSlideViewer.addListSelectionListener(new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting()) {
                //System.out.println(model.get(layerList.getSelectedIndex()) + " selected.");
                lecture.search(lectureSlideViewer.getSelectedIndex());
                curSlide = lecture.getCurrentSlide();
                currSlideUI.setVisible(false);
                currSlideUI = slidePanels.get(lecture.getCurrentSlideNum());
                jScrollPane1.setViewportView(currSlideUI);
                currSlideUI.setVisible(true);
                }
                }
                });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

            presentation = new javax.swing.JPanel();
            jScrollPane1 = new javax.swing.JScrollPane();
            //lectureContent = new javax.swing.JEditorPane();
            navigation = new javax.swing.JPanel();
            lectureSlideScroll = new javax.swing.JScrollPane();
            lectureSlideViewer = new javax.swing.JList();
            navigationTools = new javax.swing.JPanel();
            firstSlideButton = new javax.swing.JButton();
            previousSlideButton = new javax.swing.JButton();
            searchPage = new javax.swing.JTextField();
            nextSlideButton = new javax.swing.JButton();
            lastSlideButton = new javax.swing.JButton();

            setMinimumSize(new java.awt.Dimension(800, 600));

            presentation.setMinimumSize(new java.awt.Dimension(599, 204));
            presentation.setPreferredSize(new java.awt.Dimension(599, 204));
            /*
               lectureContent.setMinimumSize(new java.awt.Dimension(780, 413));
               lectureContent.setPreferredSize(new java.awt.Dimension(780, 413));
               jScrollPane1.setViewportView(lectureContent);
             */
            javax.swing.GroupLayout presentationLayout = new javax.swing.GroupLayout(presentation);
            presentation.setLayout(presentationLayout);
            presentationLayout.setHorizontalGroup(
                    presentationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, presentationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    );
            presentationLayout.setVerticalGroup(
                    presentationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, presentationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                        .addContainerGap())
                    );

            navigation.setPreferredSize(new java.awt.Dimension(599, 223));

            lectureSlideViewer.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            lectureSlideViewer.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
            lectureSlideViewer.setVisibleRowCount(1);
            lectureSlideScroll.setViewportView(lectureSlideViewer);

            navigationTools.setBackground(new java.awt.Color(0, 51, 102));
            navigationTools.setPreferredSize(new java.awt.Dimension(599, 55));

            firstSlideButton.setText("|<");
            firstSlideButton.setFocusable(false);
            firstSlideButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            firstSlideButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            firstSlideButton.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                    firstSlideButtonActionPerformed(evt);
                    }
                    });

            previousSlideButton.setText("<");
            previousSlideButton.setFocusable(false);
            previousSlideButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            previousSlideButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            previousSlideButton.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                    previousSlideButtonActionPerformed(evt);
                    }
                    });

            searchPage.setText("Search by Page Number...");
            searchPage.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchPageActionPerformed(evt);
                    }
                    });

            nextSlideButton.setText(">");
            nextSlideButton.setFocusable(false);
            nextSlideButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            nextSlideButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            nextSlideButton.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                    nextSlideButtonActionPerformed(evt);
                    }
                    });

            lastSlideButton.setText(">|");
            lastSlideButton.setFocusable(false);
            lastSlideButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            lastSlideButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            lastSlideButton.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                    lastSlideButtonActionPerformed(evt);
                    }
                    });

            javax.swing.GroupLayout navigationToolsLayout = new javax.swing.GroupLayout(navigationTools);
            navigationTools.setLayout(navigationToolsLayout);
            navigationToolsLayout.setHorizontalGroup(
                    navigationToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(navigationToolsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(firstSlideButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(previousSlideButton)
                        .addGap(199, 199, 199)
                        .addComponent(searchPage, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 215, Short.MAX_VALUE)
                        .addComponent(nextSlideButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lastSlideButton)
                        .addContainerGap())
                    );
            navigationToolsLayout.setVerticalGroup(
                    navigationToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, navigationToolsLayout.createSequentialGroup()
                        .addContainerGap(13, Short.MAX_VALUE)
                        .addGroup(navigationToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchPage, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nextSlideButton)
                            .addComponent(lastSlideButton)
                            .addComponent(previousSlideButton)
                            .addComponent(firstSlideButton))
                        .addContainerGap())
                    );

            javax.swing.GroupLayout navigationLayout = new javax.swing.GroupLayout(navigation);
            navigation.setLayout(navigationLayout);
            navigationLayout.setHorizontalGroup(
                    navigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(navigationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(navigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(navigationTools, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                            .addComponent(lectureSlideScroll))
                        .addContainerGap())
                    );
            navigationLayout.setVerticalGroup(
                    navigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(navigationLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(navigationTools, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lectureSlideScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(presentation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
                    .addComponent(navigation, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
                    );
            layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(presentation, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(navigation, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    /**
     * Moves presentation to the first slide
     */
    private void firstSlideButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstSlideButtonActionPerformed
        // TODO add your handling code here:
        updateCurrSlide(0);
        lectureSlideViewer.setSelectedIndex(0);
        lecture.first();
    }//GEN-LAST:event_firstSlideButtonActionPerformed
    /**
     * Moves presentation to the last slide
     */
    private void lastSlideButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastSlideButtonActionPerformed
        // TODO add your handling code here:
        updateCurrSlide(thumbnails.size() - 1);
        lectureSlideViewer.setSelectedIndex(thumbnails.size() - 1);
        lecture.last();
    }//GEN-LAST:event_lastSlideButtonActionPerformed
    /**
     * Moves presentation to the previous slide
     */
    private void previousSlideButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousSlideButtonActionPerformed
        // TODO add your handling code here:
        int currIndex = lectureSlideViewer.getSelectedIndex();
        if (currIndex > 0)  {
            lectureSlideViewer.setSelectedIndex(currIndex - 1);
            updateCurrSlide(currIndex - 1);
        }
        lecture.previous();
    }//GEN-LAST:event_previousSlideButtonActionPerformed
    /**
     * Moves the presentation to the next slide
     */
    private void nextSlideButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextSlideButtonActionPerformed
        // TODO add your handling code here:
        int currIndex = lectureSlideViewer.getSelectedIndex();
        if (currIndex < 3)  {
            lectureSlideViewer.setSelectedIndex(currIndex + 1);
            updateCurrSlide(currIndex + 1);
        }
        lecture.next();
    }//GEN-LAST:event_nextSlideButtonActionPerformed
    /**
     * Searches to the specified slide.
     */
    private void searchPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPageActionPerformed
        // TODO add your handling code here:
        int index;
        String input = searchPage.getText();
        if (input.matches("[0-9]+"))
        {
            index = Integer.parseInt(input);
            lecture.search(index);
            if (index <= lectureSlideViewer.getModel().getSize())
            {
                lectureSlideViewer.setSelectedIndex(index-1);
                updateCurrSlide(index - 1);
            }
        }
    }//GEN-LAST:event_searchPageActionPerformed
    private void updateCurrSlide(int index) {
        currSlideUI.setVisible(false);
        currSlideUI = slidePanels.get(index);
        jScrollPane1.setViewportView(currSlideUI);
        currSlideUI.setVisible(true);
        manager.updateManager(currSlideUI);

    }

    private BufferedImage createImage(JPanel panel) {
        int width = panel.getWidth();
        int height = panel.getHeight();
        System.out.println(width + "" + height);
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        Graphics2D graphics = image.createGraphics();
        panel.paint(graphics);

        return image;
    }

    public SlideUI getCurrentSlideUI()  {
        return currSlideUI;
    }


    public void addSlide(File file)
    {
        SlideUI currSlide = new SlideUI(toolbox, addPresentation(file)); 
        slidePanels.add(currSlide);
        updateSlidePanel();
    }
<<<<<<< .mine

    public void addSlide()  {
        SlideUI currSlide = new SlideUI(toolbox); 
        slidePanels.add(currSlide);
        updateSlidePanel();
    }
    
    public void deleteSlide(int index)  {
    	slidePanels.remove(index);
    	for(int ndx = index; ndx < thumbnails.size(); ndx++)  {
    		thumbnails.get(ndx).removeAll();
    		thumbnails.get(ndx).add(new JLabel("Slide" + ndx));
    	}
    	thumbnails.remove(index);
    	model.remove(index);
    	repaint();
    }
    
=======

    public void addSlide()  {
        SlideUI currSlide = new SlideUI(toolbox); 
        slidePanels.add(currSlide);
        updateSlidePanel();
    }
    
    /**
     * Adds HTML text to a new slide
     */
    public void addText(ArrayList<String> htmlContent) {
        for(int i = 0; i < htmlContent.size(); i++)
        {
            SlideUI newSlide = new SlideUI(toolbox, fileText);
            slidePanels.add(newSlide);
        }
    }
    public void deleteSlide()  {
    	
    }
    
>>>>>>> .r686
    public String addPresentation(File present) {
        StringBuilder contentBuilder = new StringBuilder();
        //Scanner sc = new Scanner(getClass().getClassLoader().
        //    	getResourceAsStream("eclasstool/view/presentation/lectureMockup.html"));

        try 
        {
            Scanner sc = new Scanner(present);
            String fileText = new String("");
            while(sc.hasNextLine())
            {
                //System.out.println(fileText);
                fileText += sc.nextLine() + "\n";
            }
            return fileText;
        }
        catch(FileNotFoundException e)
        {
            System.out.println("ERRRROR");
        }
        return null;
        // lectureContent.setText(fileText);
    } 
    
    public void editSlide(int index, String html)  {
    	System.out.println("Edit slide index: " + index + "w/ " + html);
    	slidePanels.get(index).editLectureContent(html);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PresentationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PresentationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PresentationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PresentationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                new PresentationUI().setVisible(true);
                }
                });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
     * Slide button to move to first slide
     */
    private javax.swing.JButton firstSlideButton;
    /**
     * Scroll panel for presentation
     */
    private javax.swing.JScrollPane jScrollPane1;
    /**
     * Slide button to move to last slide
     */
    private javax.swing.JButton lastSlideButton;
    /**
     * Pane displaying the lecture
     */

    //private javax.swing.JEditorPane lectureContent;
    /**
     * Scroll pane for the lectre
     */
    private javax.swing.JScrollPane lectureSlideScroll;
    /**
     * List to represent the slides
     */
    private javax.swing.JList lectureSlideViewer;
    /**
     * Panel for navigation
     */
    private javax.swing.JPanel navigation;
    /**
     * Panel for navigation tools
     */
    private javax.swing.JPanel navigationTools;
    /**
     * Move to the next presentation
     */
    private javax.swing.JButton nextSlideButton;
    /**
     * Panel for the current presentation
     */
    private javax.swing.JPanel presentation;
    /**
     * Button to move to the previous slide
     */
    private javax.swing.JButton previousSlideButton;
    /**
     * Field to search to a slide
     */
    private javax.swing.JTextField searchPage;
    // End of variables declaration//GEN-END:variables
}

