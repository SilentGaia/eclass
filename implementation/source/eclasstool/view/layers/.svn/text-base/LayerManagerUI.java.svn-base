/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eclasstool.view.layers;
import java.awt.Color;
import javax.swing.*;
import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.event.*;

import eclasstool.model.layers.*;
import eclasstool.view.presentation.*;
import eclasstool.view.drawingtools.*;

/**
 * The Class LayerManagerUI is the main frame of the EClass Layer Manager.
 *
 * @author Tammy Kong (takong@calpoly.edu)
 * @version 20jan15
 */
public class LayerManagerUI extends javax.swing.JInternalFrame {
    private DrawingToolsUI toolbox;
    private DefaultListModel publicModel, privateModel;
    private int privateCounter, publicCounter;
    private boolean isPublic;
    private SlideUI slide;
    /**
     * Creates new form LayerManagerUI
     */
    public LayerManagerUI(DrawingToolsUI toolbox) {
        super("Layers Manager", false, true);
        this.toolbox = toolbox;
        this.slide = null;
        initComponents();
        //manager = new LayersManager(toolbox);
        publicModel = new DefaultListModel();
        privateModel = new DefaultListModel();
        publicList.setCellRenderer(new CustomListCellRenderer());
        privateList.setCellRenderer(new CustomListCellRenderer());
        publicList.setModel(publicModel);
        privateList.setModel(privateModel);
        //initLayers();
    }

    /**
     * Adds the first layer to the layer manager
     */ 
    private void initLayers() {
        isPublic = false;
        publicCounter = 1;
        privateCounter = 1;
        curLayer = manager.getCurLayer();
        curLayer = manager.getCurLayer();
        privateModel.addElement(new LayerUI(toolbox, curLayer, slide, privateCounter));
        privateCounter++;

        isPublic = true;
        manager.setList(isPublic);

        manager.addLayer();
        curLayer = manager.getCurLayer();
        publicModel.addElement(new LayerUI(toolbox, curLayer, slide, publicCounter));
        publicCounter++;
        publicList.setSelectedIndex(0);


	privateList.addListSelectionListener(new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting() || !isPublic) {
                isPublic = false;
                manager.setList(isPublic);
                publicList.clearSelection();
                manager.setCurLayer(privateList.getSelectedIndex());
                slide.getLayer(isPublic, privateList.getSelectedIndex());
                curLayer = manager.getCurLayer();
                }
                }
                });
     
       publicList.addListSelectionListener(new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting() || isPublic) {
                isPublic = true;
                manager.setList(isPublic);
                privateList.clearSelection();
                manager.setCurLayer(publicList.getSelectedIndex());
                slide.getLayer(isPublic, publicList.getSelectedIndex());
                curLayer = manager.getCurLayer();
                }
                }
                });





    }

    /**
     * This method returns the LayerManager
     * @return Returns the LayerManager
     */  
    public LayersManager getLayersManager()  {
        return manager;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

            buttonPanel = new javax.swing.JPanel();
            bkgLabel = new javax.swing.JLabel();
            inkLabel = new javax.swing.JLabel();
            bkgSlider = new javax.swing.JSlider();
            inkSlider = new javax.swing.JSlider();
            addLayer = new javax.swing.JButton();
            deleteLayer = new javax.swing.JButton();
            bkgValue = new javax.swing.JLabel();
            inkValue = new javax.swing.JLabel();
            layerVisibility = new javax.swing.JToggleButton();
            slidePanel = new javax.swing.JPanel();
            slideNumber = new javax.swing.JLabel();
            slideImage = new javax.swing.JPanel();
            publicPanel = new javax.swing.JPanel();
            publicScroll = new javax.swing.JScrollPane();
            publicList = new javax.swing.JList();
            publicLabel = new javax.swing.JLabel();
            privatePanel = new javax.swing.JPanel();
            privateLabel = new javax.swing.JLabel();
            privateScroll = new javax.swing.JScrollPane();
            privateList = new javax.swing.JList();

            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            setMinimumSize(new java.awt.Dimension(346, 293));


            buttonPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));




            //privateList.addListSelectionListener(new ListSelectionListener() {
            //      @Override 
            //      public void valueChanged(ListSelectionEvent evt) {
            //              isPublic = false;
            //              manager.setList(isPublic);
            //              publicList.clearSelection();
            //       }
            //});

            //publicList.addListSelectionListener(new ListSelectionListener() {
            //       @Override
	    //	   public void valueChanged(ListSelectionEvent evt) {
            //              isPublic = true;
            //              manager.setList(isPublic);
            //              privateList.clearSelection();
            //       }
            //});
            /*
            publicPanel.addMouseListener(new MouseAdapter() {
                public void mousePressed(MouseEvent evt) {
                    isPublic = true;
                    manager.setList(isPublic);
                    privateList.clearSelection();   
                }
           });


           privatePanel.addMouseListener(new MouseAdapter() {
               public void mousePressed(MouseEvent evt) {
                   isPublic = false;
                   manager.setList(isPublic);
                   publicList.clearSelection();
               }
           });

*/

        privateList.addListSelectionListener(new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
 	               if (e.getValueIsAdjusting() || !isPublic) {
        		        isPublic = false;
        		        manager.setList(isPublic);
        		        publicList.clearSelection();
		                manager.setCurLayer(privateList.getSelectedIndex());
               			slide.getLayer(isPublic, privateList.getSelectedIndex());
		                curLayer = manager.getCurLayer();
                	}
                }
       });

       publicList.addListSelectionListener(new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
                	if (e.getValueIsAdjusting() || isPublic) {
	                	isPublic = true;
        	        	manager.setList(isPublic);
               			privateList.clearSelection();
        	        	manager.setCurLayer(publicList.getSelectedIndex());
	                	slide.getLayer(isPublic, publicList.getSelectedIndex());
                		curLayer = manager.getCurLayer();
               		}
       		}
	});


            bkgLabel.setText("BKG:");

            inkLabel.setText("Ink:");

            bkgSlider.setMajorTickSpacing(20);
            bkgSlider.setPaintTicks(true);
            bkgSlider.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseReleased(java.awt.event.MouseEvent evt) {
                    bkgSliderMouseReleased(evt);
                    }
                    });

            inkSlider.setMajorTickSpacing(20);
            inkSlider.setPaintTicks(true);
            inkSlider.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseReleased(java.awt.event.MouseEvent evt) {
                    inkSliderMouseReleased(evt);
                    }
                    });

            layerVisibility.setBackground(new java.awt.Color(255, 255, 255));
            layerVisibility.setIcon(openEye);
            layerVisibility.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                    layerVisibilityActionPerformed(evt);
                    }
                    });

            addLayer.setIcon(new javax.swing.ImageIcon(getClass().getClassLoader().getResource("eclasstool/view/layers/addLayer.png"))); // NOI18N
            addLayer.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                    addLayerActionPerformed(evt);
                    }
                    });

            deleteLayer.setIcon(new javax.swing.ImageIcon(getClass().getClassLoader().getResource("eclasstool/view/layers/deleteLayer.png"))); // NOI18N
            deleteLayer.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                    deleteLayerActionPerformed(evt);
                    }
                    });

            bkgValue.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
            bkgValue.setText("50");

            inkValue.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
            inkValue.setText("50");

            javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
            buttonPanel.setLayout(buttonPanelLayout);
            buttonPanelLayout.setHorizontalGroup(
                    buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buttonPanelLayout.createSequentialGroup()
                        .addContainerGap(9, Short.MAX_VALUE)
                        .addComponent(layerVisibility, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addLayer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(deleteLayer, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(buttonPanelLayout.createSequentialGroup()
                                .addComponent(bkgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(bkgValue))
                            .addComponent(bkgSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(buttonPanelLayout.createSequentialGroup()
                                .addComponent(inkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inkValue))
                            .addComponent(inkSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8))
                        );
            buttonPanelLayout.setVerticalGroup(
                    buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buttonPanelLayout.createSequentialGroup()
                        .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(buttonPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(bkgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(inkLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bkgValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(inkValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(inkSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bkgSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(buttonPanelLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(deleteLayer)
                                    .addComponent(addLayer)
                                    .addComponent(layerVisibility))))
                        .addGap(15, 15, 15))
                    );

            slidePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

            slideNumber.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            slideNumber.setText("Slide 1");

            slideImage.setBackground(new java.awt.Color(255, 255, 255));

            javax.swing.GroupLayout slideImageLayout = new javax.swing.GroupLayout(slideImage);
            slideImage.setLayout(slideImageLayout);
            slideImageLayout.setHorizontalGroup(
                    slideImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGap(0, 129, Short.MAX_VALUE)
                    );
            slideImageLayout.setVerticalGroup(
                    slideImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGap(0, 79, Short.MAX_VALUE)
                    );

            javax.swing.GroupLayout slidePanelLayout = new javax.swing.GroupLayout(slidePanel);
            slidePanel.setLayout(slidePanelLayout);
            slidePanelLayout.setHorizontalGroup(
                    slidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, slidePanelLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(slideImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(slideNumber)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    );
            slidePanelLayout.setVerticalGroup(
                    slidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(slidePanelLayout.createSequentialGroup()
                        .addGroup(slidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(slidePanelLayout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(slideNumber))
                            .addGroup(slidePanelLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(slideImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(15, 15, 15))
                    );

            publicScroll.setViewportView(publicList);

            publicLabel.setText("Public Layers:");

            javax.swing.GroupLayout publicPanelLayout = new javax.swing.GroupLayout(publicPanel);
            publicPanel.setLayout(publicPanelLayout);
            publicPanelLayout.setHorizontalGroup(
                    publicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(publicScroll)
                    .addGroup(publicPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(publicLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    );
            publicPanelLayout.setVerticalGroup(
                    publicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, publicPanelLayout.createSequentialGroup()
                        .addComponent(publicLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(publicScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0))
                    );

            privateLabel.setText("Private Layers:");

            privateScroll.setViewportView(privateList);

            javax.swing.GroupLayout privatePanelLayout = new javax.swing.GroupLayout(privatePanel);
            privatePanel.setLayout(privatePanelLayout);
            privatePanelLayout.setHorizontalGroup(
                    privatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(privateScroll)
                    .addGroup(privatePanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(privateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    );
            privatePanelLayout.setVerticalGroup(
                    privatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, privatePanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(privateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(privateScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0))
                    );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(slidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(publicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(privatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    );
            layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(slidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(privatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(publicPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0))
                    );

            pack();
        }// </editor-fold>//GEN-END:initComponents




    /**
     * Adds a layer to the Collection of layers
     *
     * @param evt The action event when the add layer button is clicked
     */
    private void addLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLayerActionPerformed
        // TODO add your handling code here:

        if(isPublic)
        {
            manager.addLayer();
            slide.addLayer(true);
            slide.moveCurrToFront(true, publicCounter);
            curLayer = manager.getCurLayer();
            publicModel.addElement(new LayerUI(toolbox, curLayer, slide, publicCounter));
            publicList.setSelectedIndex(publicModel.size() - 1);
            privateList.clearSelection();
            publicCounter++;
        }
        else
        {
            manager.addLayer();
            slide.addLayer(false);
            slide.moveCurrToFront(false, privateCounter);
            curLayer = manager.getCurLayer();
            privateModel.addElement(new LayerUI(toolbox, curLayer, slide, privateCounter));
            privateList.setSelectedIndex(privateModel.size() - 1);
            publicList.clearSelection();
            privateCounter++;
            slide.getLayerIndex();
        }


    }//GEN-LAST:event_addLayerActionPerformed

    /**
     * Deletes the selected layer from the Collection of layers
     *
     * @param evt The action event when the delete button is clicked
     */ 
    private void deleteLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteLayerActionPerformed
        // TODO add your handling code here:
        if(isPublic && publicList.getSelectedIndex() > -1) 
        {
            manager.deleteLayer();
            publicModel.remove(publicList.getSelectedIndex());
            publicList.clearSelection();
            privateList.clearSelection();
            publicList.repaint();
        }
        else if(!isPublic && privateList.getSelectedIndex() > -1)
        {
            manager.deleteLayer();
            privateModel.remove(privateList.getSelectedIndex());
            privateList.clearSelection();
            publicList.clearSelection();
            privateList.repaint();
        }
        repaint();
    }//GEN-LAST:event_deleteLayerActionPerformed

    /**
     * Changes the background of the layer to a certain percentage
     *
     * @param evt The ation event when the background slider is moved
     */ 
    private void bkgSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bkgSliderMouseReleased
        // TODO add your handling code here:
        bkgValue.setText(String.valueOf(bkgSlider.getValue()));
        //System.out.println("Background slider dragged to " + bkgSlider.getValue() + ".");
        curLayer.adjustBKG(bkgSlider.getValue());
    }//GEN-LAST:event_bkgSliderMouseReleased

    /**
     *Changes the ink solidness on the layer to a certain percentage;
     * 
     * @param evt The action event when the ink slider is moved
     */
    private void inkSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inkSliderMouseReleased
        // TODO add your handling code here:
        inkValue.setText(String.valueOf(inkSlider.getValue()));
		//System.out.println("Ink slider dragged to " + inkSlider.getValue() + ".");
        curLayer.adjustInk(inkSlider.getValue());
    }//GEN-LAST:event_inkSliderMouseReleased

    /**
     * Changes the visibility of the layer
     *
     * @param evt The action event when the visibility button is clicked
     */
    private void layerVisibilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_layerVisibilityActionPerformed
        // TODO add your handling code here:
        curLayer.changeVisibility();
        repaint();
    }//GEN-LAST:event_layerVisibilityActionPerformed

    
    /**
     * Updates the Manager given the specific SlideuI.
     * @param slide The specific slide that will be used to initialize the manager
     */ 
    public void updateManager(SlideUI slide)  {
    	this.slide = slide;
    	this.manager = slide.getLayersManager();
    	publicList = slide.getPublicList();
    	privateList = slide.getPrivateList();
    	publicModel = slide.getPublicModel();
    	privateModel = slide.getPrivateModel();
    	publicScroll.setViewportView(publicList);
    	privateScroll.setViewportView(privateList);
    	if(!slide.getListsInited())  {
    		initLayers();
    		slide.setListsInited(true);
    	}
    	repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addLayer;
    private javax.swing.JLabel bkgLabel;
    private javax.swing.JSlider bkgSlider;
    private javax.swing.JLabel bkgValue;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton deleteLayer;
    private javax.swing.JLabel inkLabel;
    private javax.swing.JSlider inkSlider;
    private javax.swing.JLabel inkValue;
    private javax.swing.JToggleButton layerVisibility;
    private javax.swing.JLabel privateLabel;
    private javax.swing.JList privateList;
    private javax.swing.JPanel privatePanel;
    private javax.swing.JScrollPane privateScroll;
    private javax.swing.JLabel publicLabel;
    private javax.swing.JList publicList;
    private javax.swing.JPanel publicPanel;
    private javax.swing.JScrollPane publicScroll;
    private javax.swing.JPanel slideImage;
    private javax.swing.JLabel slideNumber;
    private javax.swing.JPanel slidePanel;
    // End of variables declaration//GEN-END:variables


    /**
     * Image of open eye to display visibility of layer
     */
    final Icon openEye = new ImageIcon(getClass().getClassLoader().getResource("eclasstool/view/layers/openEye.png"));


    private LayersManager manager;
    private Layer curLayer;
}
