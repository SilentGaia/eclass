package eclasstool.view.login;

import eclasstool.model.login.*;
import javax.swing.*;
import java.util.*;

/**
 * Register dialog represents the dialog prompting for user information. 
 * @author Eric Tran (etran04@calpoly.edu)
 */
public class RegisterDialog extends javax.swing.JFrame 
{
    /**
     * Creates new form RegisterDialog
     */
    public RegisterDialog(LoginModel model) {
        this.model = model;
        initComponents();
    }

    /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        registerPanel = new javax.swing.JPanel();
        UsernameField = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        newPassLabel = new javax.swing.JLabel();
        newPasswordField = new javax.swing.JPasswordField();
        confirmPasswordLabel = new javax.swing.JLabel();
        confirmPasswordField = new javax.swing.JPasswordField();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        UsernameField.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        UsernameField.setText("Full name:");

        newPassLabel.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        newPassLabel.setText("New Password:");

        confirmPasswordLabel.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        confirmPasswordLabel.setText("Confirm Password:");

        okButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    okButtonActionPerformed(evt);
                }
            });

        cancelButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cancelButtonActionPerformed(evt);
                }
            });

        javax.swing.GroupLayout registerPanelLayout = new javax.swing.GroupLayout(registerPanel);
        registerPanel.setLayout(registerPanelLayout);
        registerPanelLayout.setHorizontalGroup(
            registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, registerPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)
                        .addGap(14, 14, 14))
                    .addGroup(registerPanelLayout.createSequentialGroup()
                        .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(registerPanelLayout.createSequentialGroup()
                                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(newPassLabel)
                                    .addComponent(UsernameField))
                                .addGap(42, 42, 42)
                                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(newPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                                    .addComponent(usernameTextField)))
                            .addGroup(registerPanelLayout.createSequentialGroup()
                                .addComponent(confirmPasswordLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(confirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        registerPanelLayout.setVerticalGroup(
            registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registerPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UsernameField)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newPassLabel)
                    .addComponent(newPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(confirmPasswordLabel)
                    .addComponent(confirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(registerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(registerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        this.setResizable(false);
        this.setVisible(true);
    }// </editor-fold>                                    

    /**
     * Checks to see if information is valid, and registers if is, otherwise, error output. 
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt)
    {                                         
        String username = usernameTextField.getText();
        String newPassword = new String(newPasswordField.getPassword());
        String confirmPassword = new String(confirmPasswordField.getPassword());

        if (!model.getUsers().containsKey(username) && newPassword.equals(confirmPassword))
        {
            //legitimate password and name hasnt been taken in the hashmap
            this.dispose();
            model.registerUser(username, newPassword);

            JOptionPane.showMessageDialog(this,
                "Registration completed",
                "Registration completed",
                JOptionPane.INFORMATION_MESSAGE);

        }
        else if (model.getUsers().containsKey(username))
        {
            JOptionPane.showMessageDialog(this,
                "Already a registered user.",
                "Invalid registration",
                JOptionPane.ERROR_MESSAGE);
            model.resetSuccess();
        }
        else if (!newPassword.equals(confirmPassword))
        {
            JOptionPane.showMessageDialog(this,
                "Passwords do not match.",
                "Invalid registration",
                JOptionPane.ERROR_MESSAGE);
            model.resetSuccess();
        }
    }                                        

    /**
     * Cancels the dialog, and removes it from view. 
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) 
    {                                             
        this.dispose();
    }                                                      

    /** 
     * Filler method for the Observer.
     */
    public void update(Observable obs, Object ob)
    {

    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel UsernameField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPasswordField confirmPasswordField;
    private javax.swing.JLabel confirmPasswordLabel;
    private javax.swing.JLabel newPassLabel;
    private javax.swing.JPasswordField newPasswordField;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel registerPanel;
    private javax.swing.JTextField usernameTextField;

    private LoginModel model; 
    // End of variables declaration                   
}
